---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

# yamllint disable rule:line-length

name: Post-Merge CI Pipeline

on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      run_version_check:
        description: "Run version check"
        required: false
        default: false
        type: boolean
      run_dep_version_check:
        description: "Run dependency version check"
        required: false
        default: false
        type: boolean
      run_freeup_ubuntu_space:
        description: "Freeup space in runner by removing unwanted packages"
        required: false
        default: false
        type: boolean
      run_build:
        description: "Run build"
        required: false
        default: true
        type: boolean
      run_upload_assets:
        description: "Upload assets"
        required: false
        default: false
        type: boolean
      run_package_build:
        description: "Build node agent package"
        required: false
        default: false
        type: boolean
      run_lint:
        description: "Run lint"
        required: false
        default: false
        type: boolean
      run_test:
        description: "Run test"
        required: false
        default: false
        type: boolean
      run_version_tag:
        description: "Run version tag"
        required: false
        default: true
        type: boolean
      run_docker_build:
        description: "Run docker build"
        required: false
        default: false
        type: boolean
      run_docker_push:
        description: "Run docker push"
        required: false
        default: false
        type: boolean
      run_helm_build:
        description: "Run helm build"
        required: false
        default: false
        type: boolean
      run_helm_push:
        description: "Run helm push"
        required: false
        default: false
        type: boolean
      run_deb_push:
        description: "Run debian push"
        required: false
        default: false
        type: boolean
      run_artifact:
        description: "Run artifact"
        required: false
        default: false
        type: boolean
      run_version_dev:
        description: "Run version dev"
        required: false
        default: false
        type: boolean
      prefix_tag_separator:
        description: >-
          If provided, the tag will be prefixed input.project_folder with this separator
        required: false
        default: ""
        type: string
      project_folder:
        description: >-
          Project subfolder where the job will run, defaults to '.'
        required: false
        default: "."
        type: string
      assets_dir:
        description: >-
          Specifies the directory containing files and packages to be uploaded as part of the release assets.
          This directory should include all necessary artifacts that need to be attached to the GitHub release.
          If provided, the workflow will iterate over the contents of this directory and upload each file to the release.
        required: false
        default: ""
        type: string
      orch_ci_repo_ref:
        description: >-
          The ref of the orch-ci repo, including bootstrap action and scripts, defaults to 'main'
        required: false
        default: "main"
        type: string
      bootstrap_tools:
        description: >-
          "Comma-separated list of tools to install (e.g., 'go,docker') or 'all' for all tools"
        required: false
        default: "all"
        type: string
      cache_go:
        description: >-
          Should Go-related cache for project be saved/restored.
          The cache created by `pre-merge` is only available for current branch (i.e., not for other branches and not for `main`).
          However, the cache created by `main` is available for both `main` and all other branches.
          That's why it's good that caching was also enabled for `post-merge` and took into account the cache from all actions that could generate it
          (usually: `run_build`, `run_lint`, and `run_test`).
        required: false
        default: false
        type: boolean
      remove_cache_go:
        description: >-
          Should Go-related cache for project be removed when not needed anymore.
          It can be useful when there's not enough space on the runner, and all actions that create/use the cache have already been completed.
        required: false
        default: false
        type: boolean
      persist_creds:
        description: "deprecated. will be removed in the future"
        required: false
        default: false
        type: boolean
      runs_on:
        description: "Label for runner"
        required: false
        default: "ubuntu-latest"
        type: string
      trivy_config_path:
        description: "Path to trivy configuration file"
        required: false
        default: "trivy.yaml"
        type: string
      trivy_image_skip:
        description: "Images to skip scanning with trivy"
        required: false
        default: ""
        type: string
    secrets:
      SYS_ORCH_GITHUB:
        required: false
      COSIGN_PASSWORD:
        required: false
      COSIGN_PRIVATE_KEY:
        required: false
      NO_AUTH_ECR_PUSH_USERNAME:
        required: false
      NO_AUTH_ECR_PUSH_PASSWD:
        required: false
permissions: {}
jobs:
  sanitize-project-folder:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      sanitized_project_name: ${{ steps.sanitize.outputs.sanitized_project_name }}
    steps:
      - name: Sanitize project folder
        id: sanitize
        env:
          INPUTS_PROJECT_FOLDER: ${{ inputs.project_folder }}
        run: |
          # check if inputs.project_folder is set, if not return repository name
          if [ -z "${INPUTS_PROJECT_FOLDER}" ] || [ "${INPUTS_PROJECT_FOLDER}" = "." ]; then
            SANITIZED_PROJECT_NAME="${GITHUB_REPOSITORY#"${GITHUB_REPOSITORY_OWNER}/"}"
          else
            SANITIZED_PROJECT_NAME=$(echo "${INPUTS_PROJECT_FOLDER}" | tr '/' '-')
          fi

          echo "SANITIZED_PROJECT_NAME=${SANITIZED_PROJECT_NAME}" >> "$GITHUB_ENV"
          echo "sanitized_project_name=${SANITIZED_PROJECT_NAME}" >> "$GITHUB_OUTPUT"
  scorecard:
    runs-on: ubuntu-latest
    needs: sanitize-project-folder
    permissions:
      contents: read
      # Needed to upload the results to code-scanning dashboard.
      security-events: write
      # Needed to publish results and get a badge (see publish_results below).
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          ref: ${{ github.head_ref }}
          persist-credentials: false
      - name: Run OpenSSF Scorecard
        uses: ossf/scorecard-action@f49aabe0b5af0936a0987cfb85d86b75731b0186  # v2.4.1
        with:
          results_file: scorecard-results-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}.sarif
          results_format: sarif
          repo_token: ${{ secrets.SYS_ORCH_GITHUB }}
          publish_results: true
      - name: Upload Scorecard Results
        uses: github/codeql-action/upload-sarif@ff0a06e83cb2de871e5a09832bc6a81e7276941f  # v3.28.18
        with:
          sarif_file: scorecard-results-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}.sarif
      - name: Upload Scorecard Results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: scorecard-results-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}
          path: scorecard-results-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}.sarif
  trivy-filesystem-scan:
    permissions:
      security-events: write
    runs-on: ubuntu-latest
    needs: sanitize-project-folder
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          persist-credentials: false
      - name: Run Trivy Filesystem Scan
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5  # 0.30.0
        with:
          scan-type: 'fs'
          scan-ref: ${{ inputs.project_folder }}
          format: 'sarif'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          ignore-unfixed: true
          trivy-config: ${{ inputs.trivy_config_path }}
          scanners: 'vuln,misconfig,secret'
          output: "trivy_scan_report-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}.sarif"
      - name: Upload Trivy Scan Report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: trivy-scan-report-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}
          path: trivy_scan_report-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}.sarif
      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@ff0a06e83cb2de871e5a09832bc6a81e7276941f  # v3.28.18
        with:
          sarif_file: trivy_scan_report-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}.sarif
  zizimor-scan:
    permissions:
      security-events: write
    runs-on: ubuntu-latest
    needs: sanitize-project-folder
    env:
      ZIZMOR_VERSION: 1.5.2
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          persist-credentials: false

      - name: Install uv
        uses: astral-sh/setup-uv@f0ec1fc3b38f5e7cd731bb6ce540c5af426746bb  # v6.1.0

      - name: Run zizmor
        run: uvx zizmor=="$ZIZMOR_VERSION" "$GITHUB_WORKSPACE" --format sarif > zizmor_scan_report.sarif

      - name: Upload Zizmor Results
        uses: github/codeql-action/upload-sarif@ff0a06e83cb2de871e5a09832bc6a81e7276941f  # v3.28.18
        with:
          sarif_file: zizmor_scan_report.sarif
  bandit:
    permissions:
      security-events: write
    runs-on: ubuntu-latest
    needs: sanitize-project-folder
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          persist-credentials: false
      - name: Run Bandit scan
        uses: open-edge-platform/orch-ci/.github/actions/security/bandit@main
        with:
          scan-scope: "all"
  run-repo-pipelines:
    permissions:
      contents: read
    runs-on: ${{ inputs.runs_on }}
    needs: sanitize-project-folder
    outputs:
      images: ${{ steps.list-images.outputs.images }}
    env:
      GIT_SHORT_URL: ${{ github.repository }}
      PROJECT_NAME: ${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          # Do not persist credentials by default, otherwise they
          # will clash with credentials set by bootstrap action
          persist-credentials: false
          # Fetch all history, otherwise sporadic issue with missing tags
          fetch-depth: 0
          # Fetch tags
          fetch-tags: true
          # Checkout the branch that triggered the workflow to avoid detached HEAD
          ref: ${{ github.head_ref }}

      - name: Checkout action repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          repository: open-edge-platform/orch-ci
          ref: ${{ inputs.orch_ci_repo_ref }}
          path: ci
          persist-credentials: false

      - name: Version Check
        if: ${{ inputs.run_version_check }}
        env:
          BASEDIR: ${{ inputs.project_folder }}
          PREFIX_TAG_SEPARATOR: ${{ inputs.prefix_tag_separator }}
        run: |
          if [ -n "${PREFIX_TAG_SEPARATOR}" ]; then
            ./ci/scripts/version-check.sh \
              "${BASEDIR}${PREFIX_TAG_SEPARATOR}"
          else
            ./ci/scripts/version-check.sh
          fi

      - name: Version Tag
        if: ${{ inputs.run_version_tag }}
        working-directory: ${{ inputs.project_folder }}
        env:
          GITHUB_TOKEN: ${{ secrets.SYS_ORCH_GITHUB }}
          PREFIX_TAG_SEPARATOR: ${{ inputs.prefix_tag_separator }}
          PROJECT_FOLDER: ${{ inputs.project_folder }}
        run: |
          set -eu -o pipefail
          if [ -n "${PREFIX_TAG_SEPARATOR}" ]; then
            "$GITHUB_WORKSPACE"/ci/scripts/version-tag-param.sh \
              "${PROJECT_FOLDER}${PREFIX_TAG_SEPARATOR}"
          else
            "$GITHUB_WORKSPACE"/ci/scripts/version-tag.sh
          fi

      - name: Bootstrap CI environment
        uses: ./ci/.github/actions/bootstrap
        with:
          bootstrap_tools: ${{ inputs.bootstrap_tools }}

      - name: Dep Version Check
        if: ${{ inputs.run_dep_version_check }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          echo "Verifying dependencies version"
          make dependency-check

      - name: Make sure directories where the cache will be restored exist and are empty
        if: ${{ inputs.cache_go }}
        run: |
          # Some caches from previous steps/jobs might be left, clean them up to avoid
          # "Cannot open: File exists" errors

          GOCACHE="$(go env GOCACHE)"
          GOMODCACHE="$(go env GOMODCACHE)"

          mkdir -p "${GOCACHE}" "${GOMODCACHE}" ~/.cache/golangci-lint

          echo "Cache sizes before removal:"
          sudo du -sh "${GOCACHE}"
          sudo du -sh "${GOMODCACHE}"
          sudo du -sh ~/.cache/golangci-lint

          sudo rm -rf "${GOCACHE:?}"/{*,.*} || true
          sudo rm -rf "${GOMODCACHE:?}"/{*,.*} || true
          sudo rm -rf ~/.cache/golangci-lint/{*,.*} || true

          echo "Cache sizes after removal:"
          sudo du -sh "${GOCACHE}"
          sudo du -sh "${GOMODCACHE}"
          sudo du -sh ~/.cache/golangci-lint

          echo "GOCACHE=$GOCACHE" >> "$GITHUB_ENV"
          echo "GOMODCACHE=$GOMODCACHE" >> "$GITHUB_ENV"

      - name: Restore Go cache
        if: ${{ inputs.cache_go }}
        id: restored-project-go-cache
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684  # v4.2.3
        with:
          path: |
            ${{ env.GOCACHE }}
            ${{ env.GOMODCACHE }}
            ~/.cache/golangci-lint
          key: ${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}-${{ runner.os }}-go-${{ env.GOLANG_VER }}-${{ hashFiles('**/go.mod') }}
          restore-keys: |
            ${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}-${{ runner.os }}-go-${{ env.GOLANG_VER }}-
            ${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}-${{ runner.os }}-go-

      - name: Install cosign
        if: ${{ inputs.run_docker_push }}
        uses: ./ci/.github/actions/bootstrap
        with:
          gh_token: ${{ secrets.SYS_ORCH_GITHUB }}
          bootstrap_tools: "cosign"

      - name: Free Ubuntu Disk Space
        if: ${{ inputs.run_freeup_ubuntu_space }}
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be  # v1.3.1
        with:
          android: true
          dotnet: true

      - name: Build Code
        if: ${{ inputs.run_build }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          echo "Building the code"
          make build

      - name: Upload Assets
        if: ${{ inputs.run_upload_assets}}
        working-directory: ${{ inputs.project_folder }}
        env:
          GITHUB_TOKEN: ${{ secrets.SYS_ORCH_GITHUB }}
          ASSETS_DIR: "${{ inputs.assets_dir }}"
          PROJECT_FOLDER: "${{ inputs.project_folder }}"
        run: |
          # Check if ASSETS_DIR is provided and exists
          if [ -z "$ASSETS_DIR" ] || [ ! -d "$ASSETS_DIR" ]; then
            echo "Error: $ASSETS_DIR is not set or does not exist."
            exit 1
          fi

          # Check if PROJECT_FOLDER is provided and exists
          if [ -z "$PROJECT_FOLDER" ] || [ ! -d "$PROJECT_FOLDER" ]; then
             echo "Error: $PROJECT_FOLDER is not set or does not exist."
             exit 1
          fi

          cd "$PROJECT_FOLDER"

          # Fetch the latest tag using the project folder
          latest_tag=$(git tag --list "${PROJECT_FOLDER}/*" | sort -V | tail -n 1)
          echo "Latest tag: $latest_tag"
          echo "Attempting to create a release for tag: $latest_tag"

          # Create a release for the latest tag
          gh release create "$latest_tag" --title "Release $latest_tag" --notes "Release notes for $latest_tag"
          echo "Release creation command executed for tag: $latest_tag"

          for file in "$ASSETS_DIR"/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file to release assets..."
              gh release upload "$latest_tag" "$file" --clobber
              echo "$file uploaded to release assets."
            else
              echo "$file not found, skipping upload."
            fi
          done

      - name: Build Package
        if: ${{ inputs.run_package_build }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          make package

      - name: Find and Sign Binaries
        if: ${{ inputs.run_build }}
        working-directory: ${{ inputs.project_folder }}
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          PROJECT_FOLDER: ${{ inputs.project_folder }}
        run: |
          # common dirs to search for binaries
          directories=("out" "build" "bin")

          for dir in "${directories[@]}"; do
            full_path="$GITHUB_WORKSPACE/${PROJECT_FOLDER}/$dir"
            echo "Checking path: $full_path"
            if [ -d "$full_path" ]; then
              find "$full_path" -type f -executable | while read -r binary; do
                echo "Signing $binary"
                cosign sign-blob -y --key env://COSIGN_PRIVATE_KEY "$binary" || echo "Failed to sign $binary"
              done
            fi
          done

      - name: Lint Code
        if: ${{ inputs.run_lint }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          make lint

      - name: Test Code
        if: ${{ inputs.run_test }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          make test
          # TO DO find a replacement for cobertura

      - name: Save Go cache
        if: ${{ inputs.cache_go && steps.restored-project-go-cache.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684  # v4.2.3
        with:
          path: |
            ${{ env.GOCACHE }}
            ${{ env.GOMODCACHE }}
            ~/.cache/golangci-lint
          key: ${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}-${{ runner.os }}-go-${{ env.GOLANG_VER }}-${{ hashFiles('**/go.mod') }}

      - name: Configure AWS credentials
        if: inputs.run_docker_push || inputs.run_helm_push || inputs.run_artifact || inputs.run_deb_push
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df  # v4.2.1
        with:
          aws-access-key-id: ${{ secrets.NO_AUTH_ECR_PUSH_USERNAME }}
          aws-secret-access-key: ${{ secrets.NO_AUTH_ECR_PUSH_PASSWD }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        if: inputs.run_docker_push || inputs.run_helm_push || inputs.run_artifact || inputs.run_deb_push
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076  # v2.0.1
        with:
          registries: "080137407410"

      - name: Remove Go-related cache when not needed anymore to free up space
        if: ${{ inputs.remove_cache_go }}
        run: |
          GOCACHE="$(go env GOCACHE)"
          GOMODCACHE="$(go env GOMODCACHE)"

          echo "Cache sizes before removal:"
          sudo du -sh "${GOCACHE}"
          sudo du -sh "${GOMODCACHE}"
          sudo du -sh ~/.cache/golangci-lint

          sudo rm -rf "${GOCACHE:?}"/{*,.*} || true
          sudo rm -rf "${GOMODCACHE:?}"/{*,.*} || true
          sudo rm -rf ~/.cache/golangci-lint/{*,.*} || true

          echo "Cache sizes after removal:"
          sudo du -sh "${GOCACHE}"
          sudo du -sh "${GOMODCACHE}"
          sudo du -sh ~/.cache/golangci-lint

      - name: Build Docker image
        if: ${{ inputs.run_docker_build }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          make docker-build

      - name: Push Docker image
        if: ${{ inputs.run_docker_push }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          make docker-push

      - name: List Docker Images
        id: list-images
        if: ${{ inputs.run_docker_build }}
        env:
          TRIVY_IMAGE_SKIP: ${{ inputs.trivy_image_skip }}
        run: |
          # list of images to skip
          skip_images="${TRIVY_IMAGE_SKIP}"

          IFS=',' read -r -a skip_array <<< "$skip_images"

          # all docker images
          all_images=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -v clamav | jq -R . | jq -s -c .)

          filtered_images=()

          for image in $(echo "$all_images" | jq -r '.[]'); do
            skip=false
            for skip_image in "${skip_array[@]}"; do
              if [[ "$image" == "$skip_image" ]]; then
                skip=true
                break
              fi
            done
            if [ "$skip" = false ]; then
              filtered_images+=("$image")
            fi
          done

          images=$(printf '%s\n' "${filtered_images[@]}" | jq -R . | jq -s -c .)

          echo "images=$images"
          echo "images=$images" >> "$GITHUB_OUTPUT"

      - name: Save Docker Images
        if: ${{ inputs.run_docker_build }}
        env:
          IMAGES: ${{ steps.list-images.outputs.images }}
        run: |
          set -euxo pipefail
          docker images
          mkdir -p docker-images
          images=${IMAGES}
          # Remove the brackets and split the string into individual image names
          formatted_images=$(echo "$images" | jq -r '.[]')

          for image in $formatted_images; do
            sanitized_image=$(echo "$image" | tr -d '"')
            if [[ "$sanitized_image" == "<none>:<none>" ]] || [[ "$sanitized_image" == *"<none>"* ]]; then
              echo "Skipping image with <none> tag: $sanitized_image"
              continue
            fi
            if [ -n "$sanitized_image" ]; then
              docker save -o "docker-images/${sanitized_image//[:\/]/_}.tar" "$sanitized_image"
            else
              echo "Skipping empty image name."
            fi
          done

      - name: Upload Docker Images
        if: ${{ inputs.run_docker_build }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: docker-images-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}
          path: docker-images

      - name: Sign Docker images
        if: ${{ inputs.run_docker_push }}
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        run: |
          images=$(docker images --digests --format "{{.Repository}}@{{.Digest}}" | grep '^080137407410.dkr.ecr.us-west-2.amazonaws.com' || true)
          images_json=$(echo "$images" | jq -R . | jq -s -c .)
          for image in $(echo "$images_json" | jq -r '.[]'); do
            echo "Signing $image"
            # Check if the image is not empty
            if [ -n "$image" ]; then
              cosign sign -y --key env://COSIGN_PRIVATE_KEY "$image" || echo "Failed to sign $image"
            else
              echo "No images found to sign."
            fi
          done

      - name: Build Helm chart
        if: ${{ inputs.run_helm_build }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          make helm-build

      - name: Push Helm chart
        if: ${{ inputs.run_helm_push }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          make helm-push

      - name: Push Agent packages
        if: ${{ inputs.run_deb_push }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          make deb-push

      - name: Artifact
        if: ${{ inputs.run_artifact }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          make artifact-publish

      - name: Version dev
        if: ${{ inputs.run_version_dev }}
        run: |
          # Add your version dev commands here
          echo "Versioning dev..."

      - name: Send failure email
        if: ${{ failure() }}
        run: |
          echo "Sending failure email..."
  scan-images:
    permissions:
      security-events: write
    if: ${{ inputs.run_docker_build && needs.run-repo-pipelines.outputs.images != '[]' && needs.run-repo-pipelines.outputs.images != '[""]' }}
    needs: [sanitize-project-folder, run-repo-pipelines]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson(needs.run-repo-pipelines.outputs.images) }}
    steps:
      - name: Download Docker Images
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093  # v4.3.0
        with:
          name: docker-images-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}

      - name: Load Docker Images
        run: |
          for tar in *.tar; do
            docker load -i "$tar"
          done

      - name: Sanitize Image Name
        id: sanitize
        env:
          MATRIX_IMAGE: ${{ matrix.image }}
        run: |
          # Replace colon with underscore
          sanitized_image_name="${MATRIX_IMAGE}"
          sanitized_image_name="${sanitized_image_name//[:\/]/_}"
          echo "sanitized_image_name=$sanitized_image_name" >> "$GITHUB_ENV"

      - name: Scan Image
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5  # 0.30.0
        with:
          image-ref: ${{ matrix.image }}
          format: 'sarif'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          output: "trivy-${{ env.sanitized_image_name }}.sarif"
          ignore-unfixed: true

      - name: Upload Trivy Image Scan Report
        uses: github/codeql-action/upload-sarif@ff0a06e83cb2de871e5a09832bc6a81e7276941f  # v3.28.18
        with:
          sarif_file: trivy-${{ env.sanitized_image_name }}.sarif
