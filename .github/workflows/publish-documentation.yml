---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: 'Publish Documentation'

on:  # yamllint disable-line rule:truthy rule:line-length
  workflow_call:
    inputs:
      docs_directory:
        description: >-
          Documentation directory where the job will run, defaults to '.'
        required: false
        default: "."
        type: string
      output_directory:
        description: >-
          Directory where the documentation HTML build is located,
          defaults to 'out/html'
        required: false
        default: "out/html"
        type: string
      branch_pattern:
        description: >-
          Regex pattern to match against when selecting branches to build for
          version selector, defaults to '^(main|release-.*)$'
        required: false
        default: '^(main|release-.*)$'
        type: string
      orch_ci_repo_ref:
        description: >-
          The ref of the orch-ci repo, including bootstrap action and scripts,
          defaults to 'main'
        required: false
        default: "main"
        type: string
      endpoint:
        description: >-
          Endpoint URL where documentation will be deployed to,
          defaults to 's3://intel-openedgeplatform-documentation'
        required: false
        default: "s3://intel-openedgeplatform-documentation"
        type: string
      distribution_id:
        description: >-
          Distribution ID of documentation hosting service,
          defaults to 'E1QN7TZJG8M0VL'
        required: false
        default: "E1QN7TZJG8M0VL"
        type: string

permissions:
  contents: write
jobs:
  publish-documentation:
    runs-on: ubuntu-latest
    env:
      DOCS_DIR: ${{ inputs.docs_directory }}
      OUT_DIR: ${{ inputs.output_directory }}
      REF_NAME: ${{ github.ref_name }}
      REPO: ${{ github.repository }}
    steps:
      - name: Checkout action repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          repository: open-edge-platform/orch-ci
          path: ci
          ref: ${{ inputs.orch_ci_repo_ref }}
          token: ${{ secrets.SYS_ORCH_GITHUB }}

      - name: Bootstrap CI environment
        uses: ./ci/.github/actions/bootstrap
        with:
          gh_token: ${{ secrets.SYS_ORCH_GITHUB }}
          bootstrap_tools: "aws"

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          # Fetch all history, otherwise sporadic issue with missing tags
          fetch-depth: 0
          # Fetch tags
          fetch-tags: true
          # Checkout the branch that triggered the workflow
          # to avoid detached HEAD
          ref: ${{ github.head_ref }}

      - name: Collect branches
        env:
          PATTERN: ${{ inputs.branch_pattern }}
        shell: bash
        run: |
          # Get list of all branches on remote to build
          mapfile -t branches < <(git ls-remote --heads | cut -f3- -d/)
          for index in "${!branches[@]}"; do
            if echo "${branches[$index]}" | grep -qEv "${PATTERN}"; then
              unset -v 'branches[$index]'
            fi
          done
          if [[ -z "${branches[*]}" ]]; then
            echo "ERROR: No branches matched 'branch_pattern': ${PATTERN}"
            exit 1
          fi
          echo "DOCS_BRANCHES=(${branches[*]})" >> "$GITHUB_ENV"

      - name: Get Subdirectory
        shell: bash
        run: |
          # Convert '.' to '/'
          rshort="${REPO//./\/}"
          # Retrieve word after last '/'
          rshort="${rshort##*/}"
          # Get last name in path
          path="$(basename "${DOCS_DIR}")"
          # Remove any '.' characters
          path="${path//./}"
          # If path exists, append it
          if [[ -n "${path}" ]]; then
            subdir="${rshort}/${path}"
          else
            subdir="${rshort}"
          fi
          echo "SUBDIR=${subdir}" >> "$GITHUB_ENV"

      - name: Build Documentation
        env:
          DOCS_BRANCHES: ${{ env.DOCS_BRANCHES }}
        shell: bash
        run: |
          for branch in "${DOCS_BRANCHES[@]}"; do
            cd "${GITHUB_WORKSPACE}"
            git checkout "${branch}"
            cd "${DOCS_DIR}"
            echo "Building branch: ${branch}"
            make build
            if [[ ! -d "${OUT_DIR}" ]]; then
              echo "ERROR: Build directory does not exist for branch:"
              echo "${branch}"
              exit 1
            fi
            mkdir -p "${GITHUB_WORKSPACE}/_UPLOAD/${branch}"
            mv "${OUT_DIR}"/* "${GITHUB_WORKSPACE}/_UPLOAD/${branch}"
            make clean || :
            rm -rf "${OUT_DIR}"
          done

      - name: Trim release prefix
        env:
          DOCS_BRANCHES: ${{ env.DOCS_BRANCHES }}
        shell: bash
        run: |
          for branch in "${DOCS_BRANCHES[@]}"; do
            # Find branches that match patterns:
            # release-#.# or release-#.#.#
            if echo "${branch}" | grep -qEv '^release-\d(\.\d){1,2}$'; then
              version="${branch#*-}"
              mv "${GITHUB_WORKSPACE}/_UPLOAD/${branch}" \
                "${GITHUB_WORKSPACE}/_UPLOAD/${version}"
            fi
          done

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722  # v4.0.1
        with:
          aws-access-key-id: ${{ secrets.DOC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DOC_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Publish documentation
        env:
          ENDPOINT: ${{ inputs.endpoint }}
          DISTID: ${{ inputs.distribution_id }}
          SUBDIR: ${{ env.SUBDIR }}
        shell: bash
        run: |
          cd "${GITHUB_WORKSPACE}/_UPLOAD"
          aws s3 rm "${ENDPOINT}/${SUBDIR}" --include "*" --recursive
          aws s3 cp --include "*" --recursive . "${ENDPOINT}/${SUBDIR}"
          aws cloudfront create-invalidation \
            --distribution-id "${DISTID}" --paths "/${SUBDIR}/*"
          echo "Publishing documentation complete."
