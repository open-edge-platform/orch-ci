---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: 'Publish Documentation'

on:  # yamllint disable-line rule:truthy rule:line-length
  workflow_call:
    inputs:
      docs_directory:
        description: >-
          Documentation directory where the job will run, defaults to '.'
        required: false
        default: "."
        type: string
      output_directory:
        description: >-
          Directory where the documentation HTML build is located,
          defaults to 'out/html'
        required: false
        default: "out/html"
        type: string
      branch_pattern:
        description: >-
          Regex pattern to match against when selecting branches to build for
          version selector, defaults to '^(main|release-.*)$'
        required: false
        default: '^(main|release-.*)$'
        type: string
      simple_mode:
        description: >-
          When true, override configuration for simple documentation sites
        required: false
        default: true
        type: boolean
      orch_ci_repo_ref:
        description: >-
          The ref of the orch-ci repo, including bootstrap action and scripts,
          defaults to 'main'
        required: false
        default: "main"
        type: string
      endpoint:
        description: >-
          Endpoint URL where documentation will be deployed to,
          defaults to 's3://intel-openedgeplatform-documentation'
        required: false
        default: "s3://intel-openedgeplatform-documentation"
        type: string
      distribution_id:
        description: >-
          Distribution ID of documentation hosting service,
          defaults to 'E1QN7TZJG8M0VL'
        required: false
        default: "E1QN7TZJG8M0VL"
        type: string
    secrets:
      SYS_ORCH_GITHUB:
        description: "PAT (contents: read) to clone private repos"
        required: true
      DOC_AWS_ACCESS_KEY_ID:
        description: AWS access key for docs bucket
        required: true
      DOC_AWS_SECRET_ACCESS_KEY:
        description: AWS secret access key for docs bucket
        required: true

permissions: {}

jobs:
  publish-documentation:
    permissions:
      contents: read          # needed for actions/checkout
      pull-requests: read     # needed for gh pr list
      issues: write           # needed to post PR comment
    runs-on: ubuntu-latest
    env:
      DOCS_DIR: ${{ inputs.docs_directory }}
      OUT_DIR: ${{ inputs.output_directory }}
      REF_NAME: ${{ github.ref_name }}
      REPO: ${{ github.repository }}
    steps:
      - name: Checkout action repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          repository: open-edge-platform/orch-ci
          path: ci
          ref: ${{ inputs.orch_ci_repo_ref }}
          token: ${{ secrets.SYS_ORCH_GITHUB }}
          persist-credentials: false

      - name: Bootstrap CI environment
        uses: ./ci/.github/actions/bootstrap
        with:
          gh_token: ${{ secrets.SYS_ORCH_GITHUB }}
          bootstrap_tools: "aws,jq"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a  # v4.3.1
        with:
          aws-access-key-id: ${{ secrets.DOC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DOC_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          # Fetch all history, otherwise sporadic issue with missing tags
          fetch-depth: 0
          # Fetch tags
          fetch-tags: true
          # Checkout the branch that triggered the workflow
          # to avoid detached HEAD
          ref: ${{ github.head_ref }}
          persist-credentials: false

      # Use edge-manage-docs as a template
      - name: Checkout template
        if: ${{ inputs.simple_mode }}
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          repository: open-edge-platform/edge-manage-docs
          ref: main
          path: _template
          persist-credentials: false
          sparse-checkout: |
            docconf
            Makefile
            requirements.txt
            dict.txt
            docs/conf.py
            docs/_static/logo.svg
            docs/substitutions.txt
          sparse-checkout-cone-mode: false
          token: ${{ secrets.SYS_ORCH_GITHUB }}

      - name: Copy template
        shell: bash
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/_template/_init"
          cd "${GITHUB_WORKSPACE}/${DOCS_DIR}"
          # Override any existing files with template
          cp -rf "${GITHUB_WORKSPACE}"/_template/* .

      - name: Collect branches and versions
        env:
          PATTERN: ${{ inputs.branch_pattern }}
        shell: bash
        run: |
          # Remove ci directory
          rm -rf "${GITHUB_WORKSPACE}/ci"
          # Get list of all branches on remote to build
          mapfile -t branches < <(git ls-remote --heads | cut -f3- -d/)
          for index in "${!branches[@]}"; do
            if echo "${branches[$index]}" | grep -qPv "${PATTERN}"; then
              unset -v 'branches[$index]'
            fi
          done
          if [[ -z "${branches[*]}" ]]; then
            echo "ERROR: No branches matched 'branch_pattern': ${PATTERN}"
            exit 1
          fi
          declare -a versions
          # Replace the strings in ["example"] with the assigned string
          # Create associative array
          declare -A REPLACE
          #REPLACE=(
          #    ["main"]="dev"
          #)
          for branch in "${branches[@]}"; do
            value="${branch}"
            # Replace matches if found
            if [[ -v REPLACE[$value] ]]; then
              value="${REPLACE[$value]}"
            fi
            # Find branches that match patterns:
            # release-#.# or release-#.#.#
            if echo "${branch}" | grep -qP '^release-\d(\.\d){1,2}$'; then
              value="${branch#*-}"
            fi
            versions+=("${value}")
          done
          # Convert the array to a string with comma delimeters
          branches=$(IFS=','; echo "${branches[*]}")
          versions=$(IFS=','; echo "${versions[*]}")
          echo "DOCS_BRANCHES=${branches}" >> "$GITHUB_ENV"
          echo "DOCS_VERSIONS=${versions}" >> "$GITHUB_ENV"

      - name: Get Subdirectory
        shell: bash
        run: |
          # Replace the strings in ["example"] with the assigned string
          # Create associative array
          declare -A REPLACE
          REPLACE=(
              ["orch-docs"]="edge-manage-docs"
          )
          # Convert '.' to '/'
          rshort="${REPO//./\/}"
          # Retrieve word after last '/'
          rshort="${rshort##*/}"
          # Replace matches if found
          if [[ -v REPLACE[$rshort] ]]; then
            rshort="${REPLACE[$rshort]}"
          fi
          # Get last name in path
          path="$(basename "${DOCS_DIR}")"
          # Remove any '.' characters
          path="${path//./}"
          # If path exists, append it
          if [[ -n "${path}" ]]; then
            subdir="${rshort}/${path}"
          else
            subdir="${rshort}"
          fi
          echo "SUBDIR=${subdir:-NULL}" >> "$GITHUB_ENV"

      - name: Get Base URL
        env:
          DISTID: ${{ inputs.distribution_id }}
          SUBDIR: ${{ env.SUBDIR }}
        shell: bash
        run: |
          # Fetch CloudFront distribution Alt Domain Name
          domain="$(aws cloudfront get-distribution-config --id "${DISTID}" | \
            jq -r '.DistributionConfig.Aliases.Items[0]')"
          url="https://${domain}/${SUBDIR}"
          echo "BASEURL=${url:-intel.com}" >> "$GITHUB_ENV"

      - name: Create version switcher
        env:
          DOCS_VERSIONS: ${{ env.DOCS_VERSIONS }}
          BASEURL: ${{ env.BASEURL }}
        shell: bash
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/_UPLOAD"
          # Restore array
          IFS=',' read -ra versions <<< "${DOCS_VERSIONS}"
          count="${#versions[@]}"
          # Create version switcher if more than one version
          if [[ "${count}" -gt 1 ]]; then
            echo '[' > "${GITHUB_WORKSPACE}/_UPLOAD/switcher.json"
            for version in "${versions[@]}"; do
              echo -e "    {\n      \"name\":\"${version}\"," >> \
                "${GITHUB_WORKSPACE}/_UPLOAD/switcher.json"
              echo -e "      \"version\":\"${version}\"," >> \
                "${GITHUB_WORKSPACE}/_UPLOAD/switcher.json"
              echo -e "      \"url\":\"${BASEURL}/${version}/\"\n    }," >> \
                "${GITHUB_WORKSPACE}/_UPLOAD/switcher.json"
            done
            echo ']' >> "${GITHUB_WORKSPACE}/_UPLOAD/switcher.json"
            # Remove trailing comma
            sed -i -zE '$ s/(.*)    },/\1    }/' \
              "${GITHUB_WORKSPACE}/_UPLOAD/switcher.json"
          fi

      - name: Install Spark theme
        env:
          ENDPOINT: ${{ inputs.endpoint }}
          DOCS_BRANCHES: ${{ env.DOCS_BRANCHES }}
        shell: bash
        run: |
          # Restore array
          IFS=',' read -ra branches <<< "${DOCS_BRANCHES}"
          # Download Spark Sphinx theme
          tmpdir="$(mktemp -d)"
          aws s3 cp "${ENDPOINT}/theme/current" "${tmpdir}"
          theme_wheel="$(cat "${tmpdir}/current")"
          aws s3 cp "${ENDPOINT}/theme/${theme_wheel}" "${tmpdir}"
          # Checkout the first branch to build
          cd "${GITHUB_WORKSPACE}"
          git stash push
          git checkout "${branches[0]}"
          git stash pop
          cd "${DOCS_DIR}"
          # Instantiate Python Virtual Environment
          make check
          venv="$(find . -path '*/bin/activate' -name activate)"
          # shellcheck source=/dev/null
          source "${venv}"
          # Install Spark Sphinx theme
          pip3 install --no-input "${tmpdir}/${theme_wheel}"
          # Retrieve Python package location
          python_venv="$(pip3 show docconf | grep '^Location:' | \
            cut -d: -f2 | xargs)"
          deactivate
          echo "PYTHON_VENV=${python_venv}" >> "$GITHUB_ENV"

      - name: Build Documentation
        env:
          SIMPLE_MODE: ${{ inputs.simple_mode }}  # Used during make build
          DOCS_BRANCHES: ${{ env.DOCS_BRANCHES }}
          DOCS_VERSIONS: ${{ env.DOCS_VERSIONS }}
          BASEURL: ${{ env.BASEURL }}
          PYTHON_VENV: ${{ env.PYTHON_VENV }}
        shell: bash
        run: |
          # Restore array
          IFS=',' read -ra branches <<< "${DOCS_BRANCHES}"
          IFS=',' read -ra versions <<< "${DOCS_VERSIONS}"
          for index in "${!branches[@]}"; do
            branch="${branches[$index]}"
            cd "${GITHUB_WORKSPACE}"
            git reset --hard && git clean -f
            git checkout "${branch}"
            cd "${DOCS_DIR}"
            # Override any existing files with template
            cp -rf "${GITHUB_WORKSPACE}"/_template/* .
            if [ -f "docs/dictionary_append.txt" ]; then
              cat "docs/dictionary_append.txt" >> "dict.txt"
            fi
            # Populate switcher data if switcher.json exists
            if [[ -f "${GITHUB_WORKSPACE}/_UPLOAD/switcher.json" ]]; then
              echo -e "${BASEURL}\n${versions[$index]}" > \
                "${PYTHON_VENV}/docconf/switcher_data.txt"
            fi
            echo "Building branch: ${branch}"
            make build
            if [[ ! -d "${OUT_DIR}" ]]; then
              echo "ERROR: Build directory does not exist for branch:"
              echo "${branch}"
              exit 1
            fi
            mv "${OUT_DIR}" "${GITHUB_WORKSPACE}/_UPLOAD/${versions[$index]}"
            make clean || :
          done

      # - name: Replace switcher URL
      #   env:
      #     BASEURL: ${{ env.BASEURL }}
      #   shell: bash
      #   run: |
      #     # Replace switcher URL if switcher exists
      #     if [[ -f "${GITHUB_WORKSPACE}/_UPLOAD/switcher.json" ]]; then
      #       cd "${GITHUB_WORKSPACE}/_UPLOAD"
      #       pat='DOCUMENTATION_OPTIONS.theme_switcher_json_url ='
      #       for file in $(grep -rl "${pat}"); do
      #         sed -i "s|${pat}.*;$|${pat} '${BASEURL}/switcher.json';|" \
      #           "${file}"
      #       done
      #     fi

      # - name: Publish documentation
      #   env:
      #     ENDPOINT: ${{ inputs.endpoint }}
      #     DISTID: ${{ inputs.distribution_id }}
      #     SUBDIR: ${{ env.SUBDIR }}
      #   shell: bash
      #   run: |
      #     cd "${GITHUB_WORKSPACE}/_UPLOAD"
      #     aws s3 rm "${ENDPOINT}/${SUBDIR}" --include "*" --recursive
      #     aws s3 cp --include "*" --recursive . "${ENDPOINT}/${SUBDIR}"
      #     aws cloudfront create-invalidation \
      #       --distribution-id "${DISTID}" --paths "/${SUBDIR}/*"
      #     echo "Publishing documentation complete."
      #     # Remove ci directory
      #     rm -rf "${GITHUB_WORKSPACE}/ci"

      # - name: Get Pull Request Number
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   id: gh-cli
      #   shell: bash
      #   run: |
      #     echo "pr-number-closed=$(gh pr list \
      #       --search ${{ github.sha }} --state merged \
      #       --json number -q '.[] | .number' || echo "")" >> "$GITHUB_OUTPUT"

      # - name: Create comment with link in PR
      #   env:
      #     BASEURL: ${{ env.BASEURL }}
      #     DOCS_VERSIONS: ${{ env.DOCS_VERSIONS }}
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     GITHUB_PR: ${{ steps.gh-cli.outputs.pr-number-closed }}
      #   shell: bash
      #   run: |
      #     # Restore array
      #     IFS=',' read -ra versions <<< "${DOCS_VERSIONS}"
      #     top="index.html"
      #     if [ ! -f "${GITHUB_WORKSPACE}/_UPLOAD/${versions[0]}/${top}" ]; then
      #       top="toc.html"
      #     fi
      #     # Use GitHub API to create a comment on the PR
      #     COMMENT="Documentation published at: "
      #     COMMENT+="${BASEURL}/${versions[0]}/${top}"
      #     COMMENT_URL="/repos/${REPO}/issues/${GITHUB_PR}/comments"
      #     gh api \
      #       --method POST \
      #       -H "Accept: application/vnd.github+json" \
      #       -H "X-GitHub-Api-Version: 2022-11-28" \
      #       "${COMMENT_URL}" \
      #       -f "body=${COMMENT}" || :

      # # Checkout orch-ci again so the
      # # 'Post Bootstrap CI Environment' step does not fail
      # - name: Checkout action repository
      #   if: always()
      #   uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
      #   with:
      #     repository: open-edge-platform/orch-ci
      #     path: ci
      #     ref: ${{ inputs.orch_ci_repo_ref }}
      #     token: ${{ secrets.SYS_ORCH_GITHUB }}
      #     persist-credentials: false
