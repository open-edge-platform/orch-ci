---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

# too many long URLs in this file
# yamllint disable rule:line-length

name: Pre-Merge CI Pipeline

on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      run_security_scans:
        description: "Run security scans"
        required: false
        default: false
        type: boolean
      run_version_check:
        description: "Run version check"
        required: false
        default: true
        type: boolean
      run_dep_version_check:
        description: "Run dependency version check"
        required: false
        default: false
        type: boolean
      run_build:
        description: "Run build"
        required: true
        type: boolean
      run_package_build:
        description: "Build node agent package"
        required: false
        default: false
        type: boolean
      run_lint:
        description: "Run lint"
        required: false
        default: true
        type: boolean
      run_test:
        description: "Run test"
        required: false
        default: true
        type: boolean
      run_validate_clean_folder:
        description: "Run validate clean folder"
        required: false
        default: false
        type: boolean
      run_docker_build:
        description: "Run docker build"
        required: false
        default: false
        type: boolean
      run_helm_build:
        description: "Run helm build"
        required: false
        default: false
        type: boolean
      run_artifact:
        description: "Run artifact"
        required: false
        default: false
        type: boolean
      artifacts_path:
        description: >-
          Artifacts path to upload, We can give single or multiple paths as below, defaults to empty string
          variable_to_use<<EOF
          path1/output/bin/
          path2/build/sample/file.txt
          path3/scripts/*.sh
          EOF
        required: false
        default: "empty"
        type: string
      prefix_tag_separator:
        description: >-
          If provided, the tag will be prefixed input.project_folder with this separator
        required: false
        default: ""
        type: string
      project_folder:
        description: >-
          Project subfolder where the job will run, defaults to '.'
        required: false
        default: "."
        type: string
      orch_ci_repo_ref:
        description: >-
          The ref of the orch-ci repo, including bootstrap action and scripts, defaults to 'main'
        required: false
        default: "main"
        type: string
      run_reuse_check:
        description: "Header license scan with reuse"
        required: false
        default: true
        type: boolean
      bootstrap_tools:
        description: >-
          "Comma-separated list of tools to install (e.g., 'go,docker') or 'all' for all tools"
        required: false
        default: "all"
        type: string
      cache_go:
        description: >-
          "Should Go-related cache for project be saved/restored."
        required: false
        default: false
        type: boolean
      remove_cache_go:
        description: >-
          "Should Go-related cache for project be removed when not needed anymore."
        required: false
        default: false
        type: boolean
      runs_on:
        description: "Label for runner"
        required: false
        default: "ubuntu-latest"
        type: string
      trivy_image_skip:
        description: "Images to skip scanning with trivy"
        required: false
        default: ""
        type: string
      run_integration_test:
        description: "Integration tests for edge node agents"
        required: false
        default: false
        type: boolean
      trivy_config_path:
        description: "Path to trivy configuration file"
        required: false
        default: "trivy.yaml"
        type: string
permissions:
  contents: read
jobs:
  sanitize-project-folder:
    runs-on: ubuntu-latest
    outputs:
      sanitized_project_name: ${{ steps.sanitize.outputs.sanitized_project_name }}
    steps:
      - name: Sanitize project folder
        id: sanitize
        run: |
          # check if inputs.project_folder is set, if not return repository name
          if [ -z "${{ inputs.project_folder }}" ] || [ "${{ inputs.project_folder }}" = "." ]; then
            SANITIZED_PROJECT_NAME="${GITHUB_REPOSITORY#"${GITHUB_REPOSITORY_OWNER}/"}"
          else
            SANITIZED_PROJECT_NAME=$(echo "${{ inputs.project_folder }}" | tr '/' '-')
          fi

          echo "SANITIZED_PROJECT_NAME=${SANITIZED_PROJECT_NAME}" >> "$GITHUB_ENV"
          echo "sanitized_project_name=${SANITIZED_PROJECT_NAME}" >> "$GITHUB_OUTPUT"
  license-compliance-check:
    runs-on: ubuntu-latest
    if: ${{ inputs.run_reuse_check }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          ref: ${{ github.head_ref }}
      - name: REUSE Compliance Check
        uses: fsfe/reuse-action@bb774aa972c2a89ff34781233d275075cbddf542  # v5.0.0
  secrets-gitleaks-scan:
    runs-on: ubuntu-latest
    needs: sanitize-project-folder
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          ref: ${{ github.head_ref }}
      - name: Install gitleaks
        uses: open-edge-platform/orch-ci/.github/actions/bootstrap@main
        with:
          bootstrap_tools: "gitleaks"
      - name: Get current timestamp
        id: timestamp
        run: echo "time=$(date +%s)" >> "$GITHUB_OUTPUT"
      - name: Clone CI repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          repository: open-edge-platform/orch-ci
          path: ci
      - name: Scan for secrets
        env:
          PROJECT_FOLDER: ${{ inputs.project_folder }}
        run: |
          gitleaks dir ${{ inputs.project_folder }} -v -c ci/.gitleaks.toml --baseline-path ci/gitleaks_baselines/gitleaks-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}.json -r gitleaks-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}.json
      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: gitleaks-report-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}-${{ steps.timestamp.outputs.time }}
          path: gitleaks-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}.json
  clamav-antivirus-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          ref: ${{ github.head_ref }}
      - name: Run ClamAV Scan
        uses: open-edge-platform/orch-ci/.github/actions/clamav@main
        with:
          report-path: clamav_scan_report-${{ inputs.project_folder }}.txt
          project-folder: ${{ inputs.project_folder }}

      - name: Upload ClamAV Scan Report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: ${{ env.CLAMAV_ARTIFACT_NAME }}
          path: ${{ env.SANITIZED_CLAMAV_REPORT_PATH }}
  trivy-filesystem-scan:
    runs-on: ubuntu-latest
    needs: sanitize-project-folder
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          ref: ${{ github.head_ref }}
      - name: Run Trivy Filesystem Scan
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5  # 0.30.0
        with:
          scan-type: 'fs'
          scan-ref: ${{ inputs.project_folder }}
          format: 'table'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          ignore-unfixed: true
          trivy-config: ${{ inputs.trivy_config_path }}
          scanners: 'vuln,misconfig,secret'
          output: "trivy_scan_report-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}.txt"
      - name: Upload Trivy Scan Report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: trivy-scan-report-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}
          path: trivy_scan_report-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}.txt
  trivy-critical-scan:
    runs-on: ubuntu-latest
    needs: sanitize-project-folder
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          ref: ${{ github.head_ref }}
      - name: Run Trivy Critical Filesystem Scan
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5  # 0.30.0
        with:
          scan-type: 'fs'
          scan-ref: ${{ inputs.project_folder }}
          format: 'table'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: false
          trivy-config: ${{ inputs.trivy_config_path }}
          scanners: 'vuln,misconfig,secret'
          exit-code: 1
  run-repo-pipelines:
    runs-on: ${{ inputs.runs_on }}
    needs: sanitize-project-folder
    outputs:
      images: ${{ steps.list-images.outputs.images }}
    env:
      GIT_SHORT_URL: ${{ github.repository }}
      PROJECT_NAME: ${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          # Fetch all history, workaround sporadic issue with missing tags
          fetch-depth: 0
          # Fetch tags
          fetch-tags: true
          # Checkout the branch that triggered the workflow to avoid detached HEAD
          ref: ${{ github.head_ref }}

      - name: Checkout action repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          repository: open-edge-platform/orch-ci
          path: ci
          ref: ${{ inputs.orch_ci_repo_ref }}

      - name: Version Check
        if: ${{ inputs.run_version_check }}
        env:
          BASEDIR: ${{ inputs.project_folder }}
        run: |
          if [ -n "${{ inputs.prefix_tag_separator }}" ]; then
            ./ci/scripts/version-check.sh \
              "${{ inputs.project_folder }}${{ inputs.prefix_tag_separator }}"
          else
            ./ci/scripts/version-check.sh
          fi

      - name: Bootstrap CI environment
        uses: ./ci/.github/actions/bootstrap
        with:
          bootstrap_tools: ${{ inputs.bootstrap_tools }}

      - name: Dep Version Check
        if: ${{ inputs.run_dep_version_check }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          echo "Verifying dependencies version"
          make dependency-check

      - name: Make sure directories where the cache will be restored exist and are empty
        if: ${{ inputs.cache_go }}
        run: |
          # Some caches from previous steps/jobs might be left, clean them up to avoid
          # "Cannot open: File exists" errors

          GOCACHE="$(go env GOCACHE)"
          GOMODCACHE="$(go env GOMODCACHE)"

          mkdir -p "${GOCACHE}" "${GOMODCACHE}" ~/.cache/golangci-lint

          echo "Cache sizes before removal:"
          sudo du -sh "${GOCACHE}"
          sudo du -sh "${GOMODCACHE}"
          sudo du -sh ~/.cache/golangci-lint

          sudo rm -rf "${GOCACHE:?}"/{*,.*} || true
          sudo rm -rf "${GOMODCACHE:?}"/{*,.*} || true
          sudo rm -rf ~/.cache/golangci-lint/{*,.*} || true

          echo "Cache sizes after removal:"
          sudo du -sh "${GOCACHE}"
          sudo du -sh "${GOMODCACHE}"
          sudo du -sh ~/.cache/golangci-lint

          echo "GOCACHE=$GOCACHE" >> "$GITHUB_ENV"
          echo "GOMODCACHE=$GOMODCACHE" >> "$GITHUB_ENV"

      - name: Restore Go cache
        if: ${{ inputs.cache_go }}
        id: restored-project-go-cache
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684  # v4.2.4
        with:
          path: |
            ${{ env.GOCACHE }}
            ${{ env.GOMODCACHE }}
            ~/.cache/golangci-lint
          key: ${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}-${{ runner.os }}-go-${{ env.GOLANG_VER }}-${{ hashFiles('**/go.mod') }}
          restore-keys: |
            ${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}-${{ runner.os }}-go-${{ env.GOLANG_VER }}-
            ${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}-${{ runner.os }}-go-

      - name: Build Code
        if: ${{ inputs.run_build }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          echo "Building the code"
          make build

      - name: Lint Code
        if: ${{ inputs.run_lint }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          make lint

      - name: Test Code
        if: ${{ inputs.run_test }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          make test
          # TO DO find a replacement for cobertura

      - name: Integration test
        if: ${{ inputs.run_integration_test }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          make integration_test

      - name: Fuzz test
        if: ${{ inputs.run_integration_test }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          make fuzztest

      - name: Build Package
        if: ${{ inputs.run_package_build }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          if [ "${{ inputs.project_folder }}" == "platform-update-agent" ]; then
              make inbmdownload
          fi
          make package

      - name: Scan directories for binaries
        id: scan-directories
        run: |
          directories=("out" "build" "bin")
          for dir in "${directories[@]}"; do
            full_path="${{ inputs.project_folder }}/$dir"
            if [ -d "$full_path" ]; then
              if find "$full_path" -type f -executable | grep -q .; then
                echo "Scanning directory: $full_path"
                echo "directory=$full_path" >> $GITHUB_OUTPUT
              fi
            fi
          done

      - name: ClamAV Scan
        if: ${{ steps.scan-directories.outputs.directory }}
        uses: open-edge-platform/orch-ci/.github/actions/clamav@main
        with:
          report-path: clamav_scan_binary_report.txt
          project-folder: ${{ steps.scan-directories.outputs.directory }}

      - name: Save Go cache
        if: ${{ inputs.cache_go }}
        uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684  # v4.2.4
        with:
          path: |
            ${{ env.GOCACHE }}
            ${{ env.GOMODCACHE }}
            ~/.cache/golangci-lint
          key: ${{ steps.restored-project-go-cache.outputs.cache-primary-key }}

      - name: Remove Go-related cache when not needed anymore to free up space
        if: ${{ inputs.remove_cache_go }}
        run: |
          GOCACHE="$(go env GOCACHE)"
          GOMODCACHE="$(go env GOMODCACHE)"

          echo "Cache sizes before removal:"
          sudo du -sh "${GOCACHE}"
          sudo du -sh "${GOMODCACHE}"
          sudo du -sh ~/.cache/golangci-lint

          sudo rm -rf "${GOCACHE:?}"/{*,.*} || true
          sudo rm -rf "${GOMODCACHE:?}"/{*,.*} || true
          sudo rm -rf ~/.cache/golangci-lint/{*,.*} || true

          echo "Cache sizes after removal:"
          sudo du -sh "${GOCACHE}"
          sudo du -sh "${GOMODCACHE}"
          sudo du -sh ~/.cache/golangci-lint

      - name: Validate clean folder
        if: ${{ inputs.run_validate_clean_folder == true }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          bash -c "diff -u <(echo -n) <(git diff .)"

      - name: Build Docker image
        if: ${{ inputs.run_docker_build }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          make docker-build

      - name: Build Helm chart
        if: ${{ inputs.run_helm_build }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          make helm-build

      - name: List Docker Images
        id: list-images
        if: ${{ inputs.run_docker_build }}
        run: |
          # list of images to skip
          skip_images="${{ inputs.trivy_image_skip }}"

          IFS=',' read -r -a skip_array <<< "$skip_images"

          # all docker images
          all_images=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -v clamav | jq -R . | jq -s -c .)

          filtered_images=()

          for image in $(echo "$all_images" | jq -r '.[]'); do
            skip=false
            for skip_image in "${skip_array[@]}"; do
              if [[ "$image" == "$skip_image" ]]; then
                skip=true
                break
              fi
            done
            if [ "$skip" = false ]; then
              filtered_images+=("$image")
            fi
          done

          images=$(printf '%s\n' "${filtered_images[@]}" | jq -R . | jq -s -c .)

          echo "images=$images"
          echo "images=$images" >> "$GITHUB_OUTPUT"


      - name: Save Docker Images
        if: ${{ inputs.run_docker_build }}
        run: |
          mkdir -p docker-images
          images=${{ steps.list-images.outputs.images }}
          # Remove the brackets and split the string into individual image names
          formatted_images=$(echo "$images" | sed 's/^\[\(.*\)\]$/\1/' | tr ',' '\n')
          for image in $formatted_images; do
            docker save -o "docker-images/${image//[:\/]/_}.tar" "$image"
          done

      - name: Upload Docker Images
        if: ${{ inputs.run_docker_build }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: docker-images-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}
          path: docker-images

      - name: Artifact
        if: ${{ inputs.run_artifact && inputs.artifacts_path != 'empty' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: artifacts-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}
          path: ${{ inputs.artifacts_path }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          # Figure out if needed

      - name: Send failure email
        if: ${{ failure() }}
        run: |
          echo "Sending failure email..."

  scan-images:
    if: ${{ inputs.run_docker_build && needs.run-repo-pipelines.outputs.images != '[]' && needs.run-repo-pipelines.outputs.images != '[""]' }}
    needs: [sanitize-project-folder, run-repo-pipelines]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson(needs.run-repo-pipelines.outputs.images) }}
    steps:
      - name: Download Docker Images
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e  # v4.2.1
        with:
          name: docker-images-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}

      - name: Load Docker Images
        run: |
          for tar in *.tar; do
            docker load -i "$tar"
          done

      - name: Sanitize Image Name
        id: sanitize
        run: |
          # Replace colon with underscore
          sanitized_image_name="${{ matrix.image }}"
          sanitized_image_name="${sanitized_image_name//[:\/]/_}"
          echo "sanitized_image_name=$sanitized_image_name" >> "$GITHUB_ENV"

      - name: Scan Image
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5  # 0.30.0
        with:
          image-ref: ${{ matrix.image }}
          format: table
          output: "trivy-${{ env.sanitized_image_name }}.txt"
          ignore-unfixed: true

      - name: Calculate MD5 Checksum
        id: checksum
        run: |
          md5sum_value=$(md5sum "trivy-${{ env.sanitized_image_name }}.txt" | cut -d " " -f 1)
          echo "md5sum is $md5sum_value"
          echo "md5sum_value=$md5sum_value" >> "$GITHUB_ENV"

      - name: Upload Trivy Image Scan Report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: trivy-scan-report-${{ env.sanitized_image_name }}-${{ env.md5sum_value }}
          path: trivy-${{ env.sanitized_image_name }}.txt

      - name: Scan Image for High/Critical Issues
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5  # 0.30.0
        with:
          image-ref: ${{ matrix.image }}
          format: table
          ignore-unfixed: false
          severity: 'HIGH,CRITICAL'
          exit-code: 1
