---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

# too many long URLs in this file
# yamllint disable rule:line-length

name: Pre-Merge CI Pipeline

on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      run_security_scans:
        description: "Run security scans"
        required: false
        default: false
        type: boolean
      run_version_check:
        description: "Run version check"
        required: false
        default: true
        type: boolean
      run_dep_version_check:
        description: "Run dependency version check"
        required: false
        default: false
        type: boolean
      run_freeup_ubuntu_space:
        description: "Freeup space in runner by removing unwanted packages"
        required: false
        default: false
        type: boolean
      run_build:
        description: "Run build via make build call"
        required: true
        type: boolean
      run_package_build:
        description: "Build node agent package via make package"
        required: false
        default: false
        type: boolean
      run_lint:
        description: "Run lint via make lint"
        required: false
        default: true
        type: boolean
      lint_makeflags:
        description: "MAKEFLAGS for make lint"
        required: false
        default: ""
        type: string
      run_test:
        description: "Run test via make test"
        required: false
        default: true
        type: boolean
      run_validate_clean_folder:
        description: "Run validate clean folder"
        required: false
        default: false
        type: boolean
      run_docker_build:
        description: "Run docker build via make docker-build"
        required: false
        default: false
        type: boolean
      run_docker_push:
        description: "Run docker push via make docker-push"
        required: false
        default: false
        type: boolean
      run_helm_build:
        description: "Run helm build via make helm-build"
        required: false
        default: false
        type: boolean
      run_helm_push:
        description: "Run helm push via make helm-push"
        required: false
        default: false
        type: boolean
      run_artifact_push:
        description: "Push artifacts to Release Service fileserver"
        required: false
        default: false
        type: boolean
      artifact_to_s3:
        description: >-
          "Choose if the Release Service artifact will be pushed to S3. Default is false,
          meaning it will be an ECR artifact. Credentials will be configured based on it"
        required: false
        default: false
        type: boolean
      run_artifact:
        description: "Upload artifacts to github"
        required: false
        default: false
        type: boolean
      artifacts_path:
        description: >-
          Artifacts path to upload, We can give single or multiple paths as below, defaults to empty string
          variable_to_use<<EOF
          path1/output/bin/
          path2/build/sample/file.txt
          path3/scripts/*.sh
          EOF
        required: false
        default: "empty"
        type: string
      prefix_tag_separator:
        description: >-
          If provided, the tag will be prefixed input.project_folder with this separator
        required: false
        default: ""
        type: string
      project_folder:
        description: >-
          Project subfolder where the job will run, defaults to '.'
        required: false
        default: "."
        type: string
      orch_ci_repo_ref:
        description: >-
          The ref of the orch-ci repo, including bootstrap action and scripts, defaults to 'main'
        required: false
        default: "main"
        type: string
      run_reuse_check:
        description: "Header license scan with reuse"
        required: false
        default: true
        type: boolean
      bootstrap_tools:
        description: >-
          "Comma-separated list of tools to install (e.g., 'go,docker') or 'all' for all tools"
        required: false
        default: "all"
        type: string
      cache_go:
        description: >-
          Should Go-related cache for project be saved/restored.
          The cache created by `pre-merge` is only available for current branch (i.e., not for other branches and not for `main`).
          However, the cache created by `main` is available for both `main` and all other branches.
          That's why it's good that caching was also enabled for `post-merge` and took into account the cache from all actions that could generate it
          (usually: `run_build`, `run_lint`, and `run_test`).
        required: false
        default: false
        type: boolean
      remove_cache_go:
        description: >-
          Should Go-related cache for project be removed when not needed anymore.
          It can be useful when there's not enough space on the runner, and all actions that create/use the cache have already been completed.
        required: false
        default: false
        type: boolean
      runs_on:
        description: "Label for runner"
        required: false
        default: "ubuntu-latest"
        type: string
      version_suffix:
        description: "Set a VERSION_SUFFIX for usage in Makefiles to tag dev images"
        required: false
        default: ""
        type: string
      trivy_image_skip:
        description: "Images to skip scanning with trivy"
        required: false
        default: ""
        type: string
      run_integration_test:
        description: "Integration tests for edge node agents"
        required: false
        default: false
        type: boolean
      trivy_config_path:
        description: "Path to trivy configuration file"
        required: false
        default: "trivy.yaml"
        type: string
    secrets:
      NO_AUTH_ECR_PUSH_USERNAME:
        required: false
      NO_AUTH_ECR_PUSH_PASSWD:
        required: false
      NO_AUTH_S3_PUSH_USERNAME:
        required: false
      NO_AUTH_S3_PUSH_PASSWD:
        required: false
permissions: {}
jobs:
  sanitize-project-folder:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      sanitized_project_name: ${{ steps.sanitize.outputs.sanitized_project_name }}
    env:
      INPUTS_PROJECT_FOLDER: ${{ inputs.project_folder }}
    steps:
      - name: Sanitize project folder
        id: sanitize
        run: |
          # check if inputs.project_folder is set, if not return repository name
          if [ -z "${INPUTS_PROJECT_FOLDER}" ] || [ "${INPUTS_PROJECT_FOLDER}" = "." ]; then
            SANITIZED_PROJECT_NAME="${GITHUB_REPOSITORY#"${GITHUB_REPOSITORY_OWNER}/"}"
          else
            SANITIZED_PROJECT_NAME=$(echo "${INPUTS_PROJECT_FOLDER}" | tr '/' '-')
          fi

          echo "SANITIZED_PROJECT_NAME=${SANITIZED_PROJECT_NAME}" >> "$GITHUB_ENV"
          echo "sanitized_project_name=${SANITIZED_PROJECT_NAME}" >> "$GITHUB_OUTPUT"
  zizimor-scan:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs: sanitize-project-folder
    env:
      ZIZMOR_VERSION: 1.5.2
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          persist-credentials: false
      - name: Install uv
        uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc  # v6.4.3
      - name: Run zizmor
        run: uvx zizmor=="$ZIZMOR_VERSION" "$GITHUB_WORKSPACE" --no-exit-codes > zizmor_scan_report.txt
      - name: Upload Zizimor Scan Report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: zizmor-scan-report-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}
          path: zizmor_scan_report.txt
  license-compliance-check:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    if: ${{ inputs.run_reuse_check }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          persist-credentials: false
      - name: REUSE Compliance Check
        uses: fsfe/reuse-action@bb774aa972c2a89ff34781233d275075cbddf542  # v5.0.0
  secrets-gitleaks-scan:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs: sanitize-project-folder
    env:
      INPUTS_PROJECT_FOLDER: ${{ inputs.project_folder }}
      SANITIZIED_PROJECT_NAME: ${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          persist-credentials: false
      - name: Install gitleaks
        uses: open-edge-platform/orch-ci/.github/actions/bootstrap@5f1c7f544b235db6ded508b6b4c6a2d3a78a38be   # 0.1.45
        with:
          bootstrap_tools: "gitleaks"
      - name: Get current timestamp
        id: timestamp
        run: echo "time=$(date +%s)" >> "$GITHUB_OUTPUT"
      - name: Clone CI repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          repository: open-edge-platform/orch-ci
          path: ci
          persist-credentials: false
      - name: Scan for secrets
        env:
          PROJECT_FOLDER: ${{ inputs.project_folder }}
        run: |
          gitleaks dir "${INPUTS_PROJECT_FOLDER}" -v -c ci/.gitleaks.toml --baseline-path ci/gitleaks_baselines/gitleaks-"${SANITIZIED_PROJECT_NAME}".json -r gitleaks-"${SANITIZIED_PROJECT_NAME}".json
      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: gitleaks-report-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}-${{ steps.timestamp.outputs.time }}
          path: gitleaks-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}.json
  clamav-antivirus-scan:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          persist-credentials: false
      - name: Run ClamAV Scan
        uses: open-edge-platform/orch-ci/.github/actions/clamav@5f1c7f544b235db6ded508b6b4c6a2d3a78a38be  # 0.1.45
        with:
          report-path: clamav_scan_report-${{ inputs.project_folder }}.txt
          project-folder: ${{ inputs.project_folder }}

      - name: Upload ClamAV Scan Report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: ${{ env.CLAMAV_ARTIFACT_NAME }}
          path: ${{ env.SANITIZED_CLAMAV_REPORT_PATH }}
  trivy-filesystem-scan:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs: sanitize-project-folder
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          persist-credentials: false
      - name: Run Trivy Filesystem Scan
        uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4  # 0.32.0
        with:
          scan-type: 'fs'
          scan-ref: ${{ inputs.project_folder }}
          format: 'sarif'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          ignore-unfixed: true
          trivy-config: ${{ inputs.trivy_config_path }}
          scanners: 'vuln,misconfig,secret'
          output: "trivy_scan_report-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}.sarif"
      - name: Upload Trivy Scan Report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: trivy-scan-report-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}
          path: trivy_scan_report-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}.sarif
      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@76621b61decf072c1cee8dd1ce2d2a82d33c17ed  # v3.29.5
        with:
          sarif_file: trivy_scan_report-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}.sarif
  trivy-critical-scan:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs: sanitize-project-folder
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          persist-credentials: false
      - name: Run Trivy Critical Filesystem Scan
        uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4  # 0.32.0
        with:
          scan-type: 'fs'
          scan-ref: ${{ inputs.project_folder }}
          format: 'table'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: false
          trivy-config: ${{ inputs.trivy_config_path }}
          scanners: 'vuln,misconfig,secret'
          exit-code: 1
  bandit:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs: sanitize-project-folder
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          persist-credentials: false
      - name: Run Bandit scan
        uses: open-edge-platform/orch-ci/.github/actions/security/bandit@5f1c7f544b235db6ded508b6b4c6a2d3a78a38be  # 0.1.45
        with:
          scan-scope: "changed"
          severity-level: "HIGH"
          confidence-level: "HIGH"
          output-format: "txt"
  semgrep:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep@sha256:14e073f6417e5d2d0797aa13f26d569270b86fac9d52052d2358c985f1a4e9f0  # v1.124.0
    needs: sanitize-project-folder
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          persist-credentials: false
      - name: Run Semgrep scan
        uses: open-edge-platform/orch-ci/.github/actions/security/semgrep@5f1c7f544b235db6ded508b6b4c6a2d3a78a38be  # 0.1.45
        with:
          scan-scope: "changed"
          severity: "HIGH"
          output-format: "txt"
  run-repo-pipelines:
    permissions:
      contents: read
    runs-on: ${{ inputs.runs_on }}
    needs: sanitize-project-folder
    outputs:
      images: ${{ steps.list-images.outputs.images }}
    env:
      GIT_SHORT_URL: ${{ github.repository }}
      PROJECT_NAME: ${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          # Fetch all history, workaround sporadic issue with missing tags
          fetch-depth: 0
          # Fetch tags
          fetch-tags: true
          # Checkout the branch that triggered the workflow to avoid detached HEAD
          persist-credentials: false

      - name: Checkout action repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          repository: open-edge-platform/orch-ci
          path: ci
          ref: ${{ inputs.orch_ci_repo_ref }}
          persist-credentials: false

      - name: Version Check
        if: ${{ inputs.run_version_check }}
        env:
          BASEDIR: ${{ inputs.project_folder }}
          PREFIX_TAG_SEPARATOR: ${{ inputs.prefix_tag_separator }}
        run: |
          if [ -n "${PREFIX_TAG_SEPARATOR}" ]; then
            ./ci/scripts/version-check.sh \
              "${BASEDIR}${PREFIX_TAG_SEPARATOR}"
          else
            ./ci/scripts/version-check.sh
          fi

      - name: Bootstrap CI environment
        uses: ./ci/.github/actions/bootstrap
        with:
          bootstrap_tools: ${{ inputs.bootstrap_tools }}

      - name: Dep Version Check
        if: ${{ inputs.run_dep_version_check }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          echo "Verifying dependencies version"
          make dependency-check

      - name: Make sure directories where the cache will be restored exist and are empty
        if: ${{ inputs.cache_go }}
        run: |
          # Some caches from previous steps/jobs might be left, clean them up to avoid
          # "Cannot open: File exists" errors

          GOCACHE="$(go env GOCACHE)"
          GOMODCACHE="$(go env GOMODCACHE)"

          mkdir -p "${GOCACHE}" "${GOMODCACHE}" ~/.cache/golangci-lint

          echo "Cache sizes before removal:"
          sudo du -sh "${GOCACHE}"
          sudo du -sh "${GOMODCACHE}"
          sudo du -sh ~/.cache/golangci-lint

          sudo rm -rf "${GOCACHE:?}"/{*,.*} || true
          sudo rm -rf "${GOMODCACHE:?}"/{*,.*} || true
          sudo rm -rf ~/.cache/golangci-lint/{*,.*} || true

          echo "Cache sizes after removal:"
          sudo du -sh "${GOCACHE}"
          sudo du -sh "${GOMODCACHE}"
          sudo du -sh ~/.cache/golangci-lint

          echo "GOCACHE=$GOCACHE" >> "$GITHUB_ENV"
          echo "GOMODCACHE=$GOMODCACHE" >> "$GITHUB_ENV"

      - name: Restore Go cache
        if: ${{ inputs.cache_go }}
        id: restored-project-go-cache
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809  # v4.2.4
        with:
          path: |
            ${{ env.GOCACHE }}
            ${{ env.GOMODCACHE }}
            ~/.cache/golangci-lint
          key: ${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}-${{ runner.os }}-go-${{ env.GOLANG_VER }}-${{ hashFiles('**/go.mod') }}
          restore-keys: |
            ${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}-${{ runner.os }}-go-${{ env.GOLANG_VER }}-
            ${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}-${{ runner.os }}-go-

      - name: Free Ubuntu Disk Space
        if: ${{ inputs.run_freeup_ubuntu_space }}
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be  # v1.3.1
        with:
          android: true
          dotnet: true

      - name: Build Code
        if: ${{ inputs.run_build }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          echo "Building the code"
          make build

      - name: Lint Code
        if: ${{ inputs.run_lint }}
        working-directory: ${{ inputs.project_folder }}
        env:
          MAKEFLAGS: ${{ inputs.lint_makeflags }}
        run: |
          make lint

      - name: Test Code
        if: ${{ inputs.run_test }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          make test
          # TO DO find a replacement for cobertura

      - name: Integration test
        if: ${{ inputs.run_integration_test }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          make integration_test

      - name: Fuzz test
        if: ${{ inputs.run_integration_test }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          make fuzztest

      - name: Build Package
        if: ${{ inputs.run_package_build }}
        working-directory: ${{ inputs.project_folder }}
        shell: bash
        run: |
          make package

      - name: Scan directories for binaries
        id: scan-directories
        env:
          PROJECT_FOLDER: ${{ inputs.project_folder }}
        run: |
          directories=("out" "build" "bin")
          for dir in "${directories[@]}"; do
            full_path="${PROJECT_FOLDER}/$dir"
            if [ -d "$full_path" ]; then
              if find "$full_path" -type f -executable | grep -q .; then
                echo "Scanning directory: $full_path"
                echo "directory=$full_path" >> $GITHUB_OUTPUT
              fi
            fi
          done

      - name: ClamAV Scan
        if: ${{ steps.scan-directories.outputs.directory }}
        uses: ./ci/.github/actions/clamav
        with:
          report-path: clamav_scan_binary_report.txt
          project-folder: ${{ steps.scan-directories.outputs.directory }}

      - name: Save Go cache
        if: ${{ inputs.cache_go && steps.restored-project-go-cache.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@0400d5f644dc74513175e3cd8d07132dd4860809  # v4.2.4
        with:
          path: |
            ${{ env.GOCACHE }}
            ${{ env.GOMODCACHE }}
            ~/.cache/golangci-lint
          key: ${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}-${{ runner.os }}-go-${{ env.GOLANG_VER }}-${{ hashFiles('**/go.mod') }}

      - name: Remove Go-related cache when not needed anymore to free up space
        if: ${{ inputs.remove_cache_go }}
        run: |
          GOCACHE="$(go env GOCACHE)"
          GOMODCACHE="$(go env GOMODCACHE)"

          echo "Cache sizes before removal:"
          sudo du -sh "${GOCACHE}"
          sudo du -sh "${GOMODCACHE}"
          sudo du -sh ~/.cache/golangci-lint

          sudo rm -rf "${GOCACHE:?}"/{*,.*} || true
          sudo rm -rf "${GOMODCACHE:?}"/{*,.*} || true
          sudo rm -rf ~/.cache/golangci-lint/{*,.*} || true

          echo "Cache sizes after removal:"
          sudo du -sh "${GOCACHE}"
          sudo du -sh "${GOMODCACHE}"
          sudo du -sh ~/.cache/golangci-lint

      - name: Validate clean folder
        if: ${{ inputs.run_validate_clean_folder == true }}
        working-directory: ${{ inputs.project_folder }}
        run: |
          bash -c "diff -u <(echo -n) <(git diff .)"

      - name: Configure AWS credentials
        if: (inputs.run_docker_push || inputs.run_helm_push) && github.actor != 'dependabot[bot]'
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a  # v4.3.1
        with:
          aws-access-key-id: ${{ secrets.NO_AUTH_ECR_PUSH_USERNAME }}
          aws-secret-access-key: ${{ secrets.NO_AUTH_ECR_PUSH_PASSWD }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        if: (inputs.run_docker_push || inputs.run_helm_push) && github.actor != 'dependabot[bot]'
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076  # v2.0.1
        with:
          registries: "080137407410"

      - name: Build Docker image
        if: ${{ inputs.run_docker_build }}
        working-directory: ${{ inputs.project_folder }}
        env:
          VERSION_SUFFIX: ${{ inputs.version_suffix }}
        run: |
          make docker-build

      - name: Push Docker image
        if: ${{ inputs.run_docker_push && github.actor != 'dependabot[bot]' }}
        working-directory: ${{ inputs.project_folder }}
        env:
          VERSION_SUFFIX: ${{ inputs.version_suffix }}
        run: |
          make docker-push

      - name: Build Helm chart
        if: ${{ inputs.run_helm_build }}
        working-directory: ${{ inputs.project_folder }}
        env:
          VERSION_SUFFIX: ${{ inputs.version_suffix }}
        run: |
          make helm-build

      - name: Push Helm chart
        if: ${{ inputs.run_helm_push && github.actor != 'dependabot[bot]' }}
        working-directory: ${{ inputs.project_folder }}
        env:
          VERSION_SUFFIX: ${{ inputs.version_suffix }}
        run: |
          make helm-push

      - name: List Docker Images
        id: list-images
        if: ${{ inputs.run_docker_build }}
        env:
          TRIVY_IMAGE_SKIP: ${{ inputs.trivy_image_skip }}
        run: |
          # List of exact image names to skip (from input)
          skip_images="${TRIVY_IMAGE_SKIP}"

          # List of patterns to exclude (e.g. <none>, clamav, etc.)
          skip_patterns="<none>|clamav"

          IFS=',' read -r -a skip_array <<< "$skip_images"

          all_images=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -Ev "$skip_patterns" | jq -R . | jq -s -c .)

          filtered_images=()

          for image in $(echo "$all_images" | jq -r '.[]'); do
            skip=false
            for skip_image in "${skip_array[@]}"; do
              if [[ "$image" == "$skip_image" ]]; then
                skip=true
                break
              fi
            done
            if [ "$skip" = false ]; then
              filtered_images+=("$image")
            fi
          done

          images=$(printf '%s\n' "${filtered_images[@]}" | jq -R . | jq -s -c .)

          echo "images=$images"
          echo "images=$images" >> "$GITHUB_OUTPUT"

      - name: Save Docker Images
        if: ${{ inputs.run_docker_build }}
        env:
          IMAGES: ${{ steps.list-images.outputs.images }}
        run: |
          set -euxo pipefail
          docker images
          mkdir -p docker-images
          images=${IMAGES}
          # Remove the brackets and split the string into individual image names
          formatted_images=$(echo "$images" | jq -r '.[]')

          for image in $formatted_images; do
            sanitized_image=$(echo "$image" | tr -d '"')
            docker save -o "docker-images/${sanitized_image//[:\/]/_}.tar" "$sanitized_image"
          done

      - name: Upload Docker Images
        if: ${{ inputs.run_docker_build }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: docker-images-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}
          path: docker-images

      # Configure AWS credentials for ECR
      - name: Configure AWS credentials for ECR
        if: ${{ !inputs.artifact_to_s3 && inputs.run_artifact_push }}
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a  # v4.3.1
        with:
          aws-access-key-id: ${{ secrets.NO_AUTH_ECR_PUSH_USERNAME }}
          aws-secret-access-key: ${{ secrets.NO_AUTH_ECR_PUSH_PASSWD }}
          aws-region: us-west-2

      # Configure AWS credentials for S3
      - name: Configure AWS credentials for S3
        if: ${{ inputs.artifact_to_s3 && inputs.run_artifact_push }}
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a  # v4.3.1
        with:
          aws-access-key-id: ${{ secrets.NO_AUTH_S3_PUSH_USERNAME }}
          aws-secret-access-key: ${{ secrets.NO_AUTH_S3_PUSH_PASSWD }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        if: ${{ !inputs.artifact_to_s3 && inputs.run_artifact_push }}
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076  # v2.0.1
        with:
          registries: "080137407410"

      - name: Upload artifacts to Release Service Fileserver
        if: ${{ inputs.run_artifact_push && github.actor != 'dependabot[bot]' }}
        run: |
          make artifact-publish

      - name: Artifact upload to GitHub
        if: ${{ inputs.run_artifact && inputs.artifacts_path != 'empty' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: artifacts-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}
          path: ${{ inputs.artifacts_path }}

  scan-images:
    permissions:
      contents: read
    if: ${{ inputs.run_docker_build && needs.run-repo-pipelines.outputs.images != '[]' && needs.run-repo-pipelines.outputs.images != '[""]' }}
    needs: [sanitize-project-folder, run-repo-pipelines]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJson(needs.run-repo-pipelines.outputs.images) }}
    steps:
      - name: Download Docker Images
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5.0.0
        with:
          name: docker-images-${{ needs.sanitize-project-folder.outputs.sanitized_project_name }}

      - name: Load Docker Images
        run: |
          for tar in *.tar; do
            docker load -i "$tar"
          done

      - name: Sanitize Image Name
        id: sanitize
        env:
          MATRIX_IMAGE: ${{ matrix.image }}
        run: |
          # Replace colon with underscore
          sanitized_image_name="${MATRIX_IMAGE}"
          sanitized_image_name="${sanitized_image_name//[:\/]/_}"
          echo "sanitized_image_name=$sanitized_image_name" >> "$GITHUB_ENV"

      - name: Scan Image
        uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4  # 0.32.0
        with:
          image-ref: ${{ matrix.image }}
          format: table
          output: "trivy-${{ env.sanitized_image_name }}.txt"
          ignore-unfixed: true

      - name: Calculate MD5 Checksum
        id: checksum
        run: |
          md5sum_value=$(md5sum "trivy-${{ env.sanitized_image_name }}.txt" | cut -d " " -f 1)
          echo "md5sum is $md5sum_value"
          echo "md5sum_value=$md5sum_value" >> "$GITHUB_ENV"

      - name: Upload Trivy Image Scan Report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: trivy-scan-report-${{ env.sanitized_image_name }}-${{ env.md5sum_value }}
          path: trivy-${{ env.sanitized_image_name }}.txt

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          persist-credentials: false

      - name: Scan Image for High/Critical Issues
        uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4  # 0.32.0
        with:
          image-ref: ${{ matrix.image }}
          format: table
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'
          output: "trivy-${{ env.sanitized_image_name }}-high-critical.txt"
          trivy-config: ${{ inputs.trivy_config_path }}
          exit-code: 1
      - name: Display report for High/Critical Issues
        if: ${{ always() }}
        run: |
          cat trivy-${{ env.sanitized_image_name }}-high-critical.txt
